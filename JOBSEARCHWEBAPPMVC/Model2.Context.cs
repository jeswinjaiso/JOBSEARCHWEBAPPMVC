//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace JOBSEARCHWEBAPPMVC
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class JOBSEARCHMVCEntities1 : DbContext
    {
        public JOBSEARCHMVCEntities1()
            : base("name=JOBSEARCHMVCEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<JOBTABLE> JOBTABLEs { get; set; }
        public virtual DbSet<TABLE_COMPONY> TABLE_COMPONY { get; set; }
        public virtual DbSet<TABLE_USERS> TABLE_USERS { get; set; }
        public virtual DbSet<LOGIN_TABLE> LOGIN_TABLE { get; set; }
        public virtual DbSet<TABLE_APPLICATION> TABLE_APPLICATION { get; set; }
    
        public virtual ObjectResult<sp_AllJob_Result> sp_AllJob()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AllJob_Result>("sp_AllJob");
        }
    
        public virtual int sp_ComLogin(string una, string pwd, ObjectParameter status)
        {
            var unaParameter = una != null ?
                new ObjectParameter("una", una) :
                new ObjectParameter("una", typeof(string));
    
            var pwdParameter = pwd != null ?
                new ObjectParameter("pwd", pwd) :
                new ObjectParameter("pwd", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ComLogin", unaParameter, pwdParameter, status);
        }
    
        public virtual int sp_ComponyInsert(Nullable<int> logid, string cname, string caddress, string type, Nullable<int> cphno, string cemail)
        {
            var logidParameter = logid.HasValue ?
                new ObjectParameter("logid", logid) :
                new ObjectParameter("logid", typeof(int));
    
            var cnameParameter = cname != null ?
                new ObjectParameter("cname", cname) :
                new ObjectParameter("cname", typeof(string));
    
            var caddressParameter = caddress != null ?
                new ObjectParameter("caddress", caddress) :
                new ObjectParameter("caddress", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var cphnoParameter = cphno.HasValue ?
                new ObjectParameter("cphno", cphno) :
                new ObjectParameter("cphno", typeof(int));
    
            var cemailParameter = cemail != null ?
                new ObjectParameter("cemail", cemail) :
                new ObjectParameter("cemail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ComponyInsert", logidParameter, cnameParameter, caddressParameter, typeParameter, cphnoParameter, cemailParameter);
        }
    
        public virtual ObjectResult<string> sp_GetCompName(ObjectParameter id)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_GetCompName", id);
        }
    
        public virtual int sp_insertjob(string title, string desc, string compid, string skills, string exp, string datep, string salary, string edate, string sts)
        {
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            var descParameter = desc != null ?
                new ObjectParameter("desc", desc) :
                new ObjectParameter("desc", typeof(string));
    
            var compidParameter = compid != null ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(string));
    
            var skillsParameter = skills != null ?
                new ObjectParameter("skills", skills) :
                new ObjectParameter("skills", typeof(string));
    
            var expParameter = exp != null ?
                new ObjectParameter("exp", exp) :
                new ObjectParameter("exp", typeof(string));
    
            var datepParameter = datep != null ?
                new ObjectParameter("datep", datep) :
                new ObjectParameter("datep", typeof(string));
    
            var salaryParameter = salary != null ?
                new ObjectParameter("salary", salary) :
                new ObjectParameter("salary", typeof(string));
    
            var edateParameter = edate != null ?
                new ObjectParameter("edate", edate) :
                new ObjectParameter("edate", typeof(string));
    
            var stsParameter = sts != null ?
                new ObjectParameter("sts", sts) :
                new ObjectParameter("sts", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_insertjob", titleParameter, descParameter, compidParameter, skillsParameter, expParameter, datepParameter, salaryParameter, edateParameter, stsParameter);
        }
    
        public virtual int sp_LoginInsert(Nullable<int> logid, string uname, string password, string type)
        {
            var logidParameter = logid.HasValue ?
                new ObjectParameter("logid", logid) :
                new ObjectParameter("logid", typeof(int));
    
            var unameParameter = uname != null ?
                new ObjectParameter("uname", uname) :
                new ObjectParameter("uname", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_LoginInsert", logidParameter, unameParameter, passwordParameter, typeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_maxid()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_maxid");
        }
    
        public virtual ObjectResult<Nullable<int>> sp_maxidorg()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_maxidorg");
        }
    
        public virtual ObjectResult<Nullable<int>> sp_getcid(string username, string pwd)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var pwdParameter = pwd != null ?
                new ObjectParameter("pwd", pwd) :
                new ObjectParameter("pwd", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_getcid", usernameParameter, pwdParameter);
        }
    
        public virtual int Sp_UserReg(Nullable<int> logid, string name, string adr, string email, string phone, string qual, string skills, string exp)
        {
            var logidParameter = logid.HasValue ?
                new ObjectParameter("logid", logid) :
                new ObjectParameter("logid", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var adrParameter = adr != null ?
                new ObjectParameter("adr", adr) :
                new ObjectParameter("adr", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var qualParameter = qual != null ?
                new ObjectParameter("qual", qual) :
                new ObjectParameter("qual", typeof(string));
    
            var skillsParameter = skills != null ?
                new ObjectParameter("skills", skills) :
                new ObjectParameter("skills", typeof(string));
    
            var expParameter = exp != null ?
                new ObjectParameter("exp", exp) :
                new ObjectParameter("exp", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_UserReg", logidParameter, nameParameter, adrParameter, emailParameter, phoneParameter, qualParameter, skillsParameter, expParameter);
        }
    
        public virtual int Sp_Application(Nullable<int> jobid, Nullable<int> compid, Nullable<int> uid, string res)
        {
            var jobidParameter = jobid.HasValue ?
                new ObjectParameter("jobid", jobid) :
                new ObjectParameter("jobid", typeof(int));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            var uidParameter = uid.HasValue ?
                new ObjectParameter("uid", uid) :
                new ObjectParameter("uid", typeof(int));
    
            var resParameter = res != null ?
                new ObjectParameter("res", res) :
                new ObjectParameter("res", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Application", jobidParameter, compidParameter, uidParameter, resParameter);
        }
    }
}
